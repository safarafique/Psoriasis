# Load necessary libraries
library(pheatmap)
library(RColorBrewer)

# Set thresholds and number of top DEGs
logfc_cutoff <- 2
padj_cutoff <- 0.05
num_top_genes <- 50  # Adjust as desired

# Select top DEGs based on adjusted p-value
top_genes <- top_table[order(top_table$adj.P.Val), ]  # Sort by adjusted p-value
top_genes <- head(top_genes, n = num_top_genes)

# Subset expression matrix to include only top DEGs
expr_top_genes <- expr_corrected[rownames(top_genes), ]

# Scale the expression data by genes (rows)
expr_top_genes_scaled <- t(scale(t(expr_top_genes)))

# Create a data frame for sample annotations
annotation_col <- data.frame(Group = sample_info$group)
rownames(annotation_col) <- sample_info$sample  # Match sample names

# Define color palette for group annotations
group_colors <- brewer.pal(length(unique(sample_info$group)), "Set1")
names(group_colors) <- unique(sample_info$group)
annotation_colors <- list(Group = group_colors)

# Plot heatmap and save as PNG
png("heatmap_plot.png", width = 800, height = 800)
pheatmap(expr_top_genes_scaled, 
         annotation_col = annotation_col,
         annotation_colors = annotation_colors,
         show_rownames = TRUE, 
         show_colnames = FALSE, 
         fontsize_row = 8, 
         clustering_distance_rows = "euclidean", 
         clustering_distance_cols = "euclidean", 
         color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100), 
         main = paste("Heatmap of Top", num_top_genes, "Differentially Expressed Genes"))
dev.off()

cat("Heatmap plot saved as 'heatmap_plot.png'\n")

##########################################################################################################

# Load required libraries for UpSet plot
library(UpSetR)

# Prepare data for UpSet plot (gene presence across datasets)
all_genes <- unique(unlist(lapply(expr_list, rownames)))  # All unique genes
gene_presence <- data.frame(Gene = all_genes, stringsAsFactors = FALSE)

# Add presence/absence data for each dataset
for (study_name in names(expr_list)) {
  gene_presence[[study_name]] <- ifelse(gene_presence$Gene %in% rownames(expr_list[[study_name]]), 1, 0)
}

# Set 'Gene' as rownames and remove the 'Gene' column
rownames(gene_presence) <- gene_presence$Gene
gene_presence$Gene <- NULL

# Create the UpSet plot
upset_plot <- upset(gene_presence, 
                    sets = names(expr_list),
                    order.by = "freq", 
                    mainbar.y.label = "Number of Genes in Intersection",
                    sets.x.label = "Number of Genes per Study")

# Save UpSet plot as PNG
png("upset_plot.png", width = 1500, height = 1000, res = 150)
upset(gene_presence,
      sets = names(expr_list),
      order.by = "freq",
      mainbar.y.label = "Number of Genes in Intersection",
      sets.x.label = "Number of Genes per Study")
dev.off()

cat("UpSet plot saved to 'upset_plot.png'.\n")
